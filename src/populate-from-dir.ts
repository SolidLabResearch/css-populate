import fs from "fs";
import readline from "readline";

import { addAuthZFile, addAuthZFiles, uploadPodFile } from "./css-upload.js";
import { AuthFetchCache } from "./auth-fetch-cache.js";
import { CONTENT_TYPE_BYTE } from "./content-type.js";
import { CliArgs } from "./css-populate-args.js";

export async function populatePodsFromDir(
  authFetchCache: AuthFetchCache,
  cli: CliArgs,
  cssBaseUrl: string,
  generatedDataBaseDir: string,
  addAclFiles: boolean = false,
  addAcrFiles: boolean = false
) {
  //This expects a very specific dir layout, typically generated by jbr
  //It will upload the data for cssBaseUrl to the right pods, ignoring data for other servers
  //TODO
  cli.v1("populatePodsFromDir is not yet implemented");
  console.error("populatePodsFromDir is not yet implemented");
  //process.exit(1);
}

//OLD version that relied on an ldbc generated dataset
//   //Example person file:
//   //  /users/wvdemeer/pod-generator/out-fragments/http/localhost_3000/www.ldbc.eu/ldbc_socialnet/1.0/data/pers*.nq
//   const genDataDir =
//     generatedDataBaseDir +
//     "out-fragments/http/localhost_3000/www.ldbc.eu/ldbc_socialnet/1.0/data/";
//   const files = fs.readdirSync(genDataDir);
//   let curIndex = 0;
//   for (const file of files) {
//     if (file.startsWith("pers") && file.endsWith(".nq")) {
//       const pers = file.substring(0, file.length - 3);
//       const persIndex = curIndex++;
//       console.log(`file=${file} pers=${pers} persIndex=${persIndex}`);
//
//       let firstName = undefined,
//         lastName = undefined,
//         id = undefined;
//       const rl = readline.createInterface({
//         input: fs.createReadStream(genDataDir + file),
//         crlfDelay: Infinity,
//       });
//       for await (const line of rl) {
//         //examples:
//         //<http://localhost:3000/www.ldbc.eu/ldbc_socialnet/1.0/data/pers00000000000000000065> <http://localhost:3000/www.ldbc.eu/ldbc_socialnet/1.0/vocabulary/id> "65"^^<http://www.w3.org/2001/XMLSchema#long>
//         //<http://localhost:3000/www.ldbc.eu/ldbc_socialnet/1.0/data/pers00000000000000000065> <http://localhost:3000/www.ldbc.eu/ldbc_socialnet/1.0/vocabulary/firstName> "Marc" .
//         //<http://localhost:3000/www.ldbc.eu/ldbc_socialnet/1.0/data/pers00000000000000000065> <http://localhost:3000/www.ldbc.eu/ldbc_socialnet/1.0/vocabulary/lastName> "Ravalomanana" .
//         const t = parseTurtleLine(line);
//         if (t !== null && t[0].endsWith(`/${pers}>`)) {
//           if (t[1].endsWith("/id>")) {
//             id = t[2];
//           }
//           if (t[1].endsWith("/firstName>")) {
//             firstName = t[2];
//           }
//           if (t[1].endsWith("/lastName>")) {
//             lastName = t[2];
//           }
//           //console.log(`Line from file: ${line}`);
//         }
//       }
//       console.log(`id=${id} firstName=${firstName} lastName=${lastName}`);
//       if (!id || !firstName || !lastName) {
//         continue;
//       }
//
//       const account = `user${persIndex}`;
//       // await createPod(authFetchCache, cli, account);
//
//       const authFetch = await authFetchCache.getAuthFetcher(persIndex);
//       await uploadPodFile(
//         cli,
//         cssBaseUrl,
//         account,
//         genDataDir + "person.nq",
//         "person.nq",
//         authFetch,
//         CONTENT_TYPE_BYTE, //TODO use correct content type
//         persIndex < 2
//       );
//
//       await addAuthZFiles(
//         cli,
//         cssBaseUrl,
//         account,
//         authFetch,
//         "person.nq",
//         true,
//         false,
//         false,
//         persIndex < 2,
//         addAclFiles,
//         addAcrFiles
//       );
//     }
//   }
// }

// function parseTurtleLine(line: string): any {
//   //quick and very dirty turtle parser, that only works for the files generated by ldbc_socialnet
//   const parts = line.split(" ");
//   if (parts.length === 4 && parts[3] === ".") {
//     let c: any = parts[2];
//     if (c.startsWith('"') && c.endsWith('"')) {
//       c = c.substring(1, c.length - 1);
//     } else if (
//         c.startsWith('"') &&
//         c.endsWith('"^^<http://www.w3.org/2001/XMLSchema#long>')
//     ) {
//       c = parseInt(c.substring(1, c.length - 42));
//     }
//     return [parts[0], parts[1], c];
//   } else {
//     return null;
//   }
// }
