import fs from "fs";
import { readdir, readFile } from "node:fs/promises";

import { addAuthZFile, addAuthZFiles, uploadPodFile } from "./css-upload.js";
import { AuthFetchCache } from "./auth-fetch-cache.js";
import { CONTENT_TYPE_BYTE } from "./content-type.js";
import { CliArgs } from "./css-populate-args.js";

export async function findAccountsFromDir(dir: string): Promise<string[]> {
  const files = await readdir(dir, { withFileTypes: true });
  const res: string[] = [];
  for (const file of files) {
    if (file.isDirectory()) res.push(file.name);
  }

  return res;
}

/**
 *
 * @param authFetchCache
 * @param cli
 * @param cssBaseUrl the URL for the CCS server to populate
 * @param generatedDataBaseDir a dir with subdirs per pod for the server to populate. (= NOT a dir with subdirs per server!)
 * @param addAclFiles
 * @param addAcrFiles
 */
export async function populatePodsFromDir(
  authFetchCache: AuthFetchCache,
  cli: CliArgs,
  cssBaseUrl: string,
  generatedDataBaseDir: string,
  addAclFiles: boolean = false,
  addAcrFiles: boolean = false
) {
  //This expects a very specific dir layout, typically generated by jbr
  //  in generatedDataBaseDir there must be subdirs named for accounts/pods.
  //  in these subdirs, are the files to be stored in these pod

  const accountDirs = await readdir(generatedDataBaseDir, {
    withFileTypes: true,
  });
  for (const accountDir of accountDirs) {
    if (!accountDir.isDirectory()) {
      console.warn(
        `Found non-dir where expecting only account dirs: ${accountDir.name}`
      );
      continue;
    }

    const account = accountDir.name;
    const authFetch = await authFetchCache.getAuthFetcherByName(account);

    const podFiles = await readdir(accountDir.name, { withFileTypes: true });
    const podFilesToUpload: fs.Dirent[] = [];
    podFilesToUpload.push(...podFiles);

    console.log(
      `populatePodsFromDir will upload files to pod ${account}: ${JSON.stringify(
        podFilesToUpload.map((e) => e.name),
        null,
        3
      )}`
    );

    while (podFilesToUpload.length > 0) {
      const podFile: fs.Dirent = <fs.Dirent>podFilesToUpload.shift();
      if (podFile.isDirectory()) {
        const extraFiles = await readdir(accountDir.name, {
          withFileTypes: true,
        });
        podFilesToUpload.push(...extraFiles);
      } else if (podFile.isFile()) {
        console.assert(podFile.name.startsWith(accountDir.name));

        const fileRelPath = podFile.name.substring(accountDir.name.length);
        cli.v1(
          `Uploading. account=${account} file='${podFile.name}' fileRelPath='${fileRelPath}'`
        );

        const fileContent = await readFile(podFile.name, { encoding: "utf8" });
        await uploadPodFile(
          cli,
          cssBaseUrl,
          account,
          fileContent,
          fileRelPath,
          authFetch,
          CONTENT_TYPE_BYTE, //TODO use correct content type
          false
        );

        await addAuthZFiles(
          cli,
          cssBaseUrl,
          account,
          authFetch,
          fileRelPath,
          true,
          false,
          false,
          false,
          addAclFiles,
          addAcrFiles
        );
      }
    }
  }
}
